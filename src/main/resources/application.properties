server.port = 9000

#same information that we need for JDBC will go here
#spring.datasource.url=jdbc:postgresql://${AWS_ENDPOINT_AIRNETWORK}/airnetwork
#spring.datasource.username=${RDS_USERNAME}
#spring.datasource.password=${RDS_PASSWORD}
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect

#DDl auto is how we will deal with what happens to our schema when the app runs:

# create
# - drops all existing tables and recreate them

#validate
# - checks to make sure the schema exists as expected before making operations

# update
# - will NOT delete anything. It will only add/modify existing schemas

# create-drop
# - hibernate will create your schema then delete it when the app ends

#same information that we needed for JDBC will go here
spring.datasource.url=jdbc:postgresql://${AWS_RDS_ENDPOINT}/hellohibernate
spring.datasource.username=${RDS_USERNAME}
spring.datasource.password=${RDS_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect




spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
